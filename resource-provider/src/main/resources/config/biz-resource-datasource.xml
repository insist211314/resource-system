<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${pool.initialSize}" />
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${pool.maxActive}" />
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${pool.maxIdle}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${pool.minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${pool.maxWait}" />        
        <property name="validationQuery" value="SELECT 1" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="testWhileIdle" value="true" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${pool.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${pool.minEvictableIdleTimeMillis}" />
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${pool.removeAbandonedTimeout}" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="mergeStat" />
    </bean>

	<!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Activates scanning of @Repository and @Service -->
    <!-- <context:component-scan base-package="com.mycompany.iread"/> -->

    <bean id="paginationInterceptor" class="com.appleframework.orm.mybatis.interceptor.PaginationInterceptor" />

    <!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="plugins">
			<array>
				<ref bean="paginationInterceptor"/>
				<ref bean="paginationInterceptor2"/>
			</array>
		</property>
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.jiuzhi.common.resource.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mapper/*Mapper.xml"/>
		
	</bean>

	<bean id="paginationInterceptor2" class="com.appleframework.orm.mybatis.pagehelper.PageHelper">
		<property name="properties">
			<props>
				<prop key="dialect">mysql</prop>
				<prop key="rowBoundsWithCount">true</prop>
				<prop key="offsetAsPageNum">true</prop>
				<prop key="pageSizeZero">true</prop>
				<prop key="reasonable">true</prop>
				<prop key="supportMethodsArguments">false</prop>
				<prop key="returnPageInfo">always</prop>
			</props>
		</property>
	</bean>
	
	<!-- 扫描basePackage下所有以@Repository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">	
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.jiuzhi.common.resource.dao" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
	</bean>

    <!-- 另一个事务管理器, Jdbc单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 定义aspectj -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource"> 
			<ref bean="dataSource" /> 
		</property> 
	</bean> 
	
</beans>